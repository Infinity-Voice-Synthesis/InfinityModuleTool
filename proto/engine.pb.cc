// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: engine.proto

#include "engine.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace infinity {
namespace module {
namespace engine {
constexpr Engine_parameter::Engine_parameter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , min_(0)
  , max_(0)
  , default__(0){}
struct Engine_parameterDefaultTypeInternal {
  constexpr Engine_parameterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Engine_parameterDefaultTypeInternal() {}
  union {
    Engine_parameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Engine_parameterDefaultTypeInternal _Engine_parameter_default_instance_;
constexpr Engine::Engine(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trackparams_()
  , noteparams_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , main_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , icon_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , author_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , infor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , eula_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , warrantdate_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , warranttime_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , imt_version_(0)
  , version_(0)
  , splitgroup_(false)
  , autocheck_(false)
  , checkmethod_(0u){}
struct EngineDefaultTypeInternal {
  constexpr EngineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EngineDefaultTypeInternal() {}
  union {
    Engine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EngineDefaultTypeInternal _Engine_default_instance_;
}  // namespace engine
}  // namespace module
}  // namespace infinity
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_engine_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_engine_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_engine_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_engine_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::infinity::module::engine::Engine_parameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::infinity::module::engine::Engine_parameter, name_),
  PROTOBUF_FIELD_OFFSET(::infinity::module::engine::Engine_parameter, min_),
  PROTOBUF_FIELD_OFFSET(::infinity::module::engine::Engine_parameter, max_),
  PROTOBUF_FIELD_OFFSET(::infinity::module::engine::Engine_parameter, default__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::infinity::module::engine::Engine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::infinity::module::engine::Engine, imt_version_),
  PROTOBUF_FIELD_OFFSET(::infinity::module::engine::Engine, name_),
  PROTOBUF_FIELD_OFFSET(::infinity::module::engine::Engine, main_),
  PROTOBUF_FIELD_OFFSET(::infinity::module::engine::Engine, splitgroup_),
  PROTOBUF_FIELD_OFFSET(::infinity::module::engine::Engine, icon_),
  PROTOBUF_FIELD_OFFSET(::infinity::module::engine::Engine, author_),
  PROTOBUF_FIELD_OFFSET(::infinity::module::engine::Engine, version_),
  PROTOBUF_FIELD_OFFSET(::infinity::module::engine::Engine, infor_),
  PROTOBUF_FIELD_OFFSET(::infinity::module::engine::Engine, trackparams_),
  PROTOBUF_FIELD_OFFSET(::infinity::module::engine::Engine, noteparams_),
  PROTOBUF_FIELD_OFFSET(::infinity::module::engine::Engine, checkmethod_),
  PROTOBUF_FIELD_OFFSET(::infinity::module::engine::Engine, autocheck_),
  PROTOBUF_FIELD_OFFSET(::infinity::module::engine::Engine, eula_),
  PROTOBUF_FIELD_OFFSET(::infinity::module::engine::Engine, warrantdate_),
  PROTOBUF_FIELD_OFFSET(::infinity::module::engine::Engine, warranttime_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::infinity::module::engine::Engine_parameter)},
  { 9, -1, sizeof(::infinity::module::engine::Engine)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::infinity::module::engine::_Engine_parameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::infinity::module::engine::_Engine_default_instance_),
};

const char descriptor_table_protodef_engine_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014engine.proto\022\026infinity.module.engine\"\256"
  "\003\n\006Engine\022\023\n\013IMT_Version\030\001 \001(\001\022\014\n\004name\030\002"
  " \001(\t\022\014\n\004main\030\003 \001(\t\022\022\n\nsplitGroup\030\004 \001(\010\022\014"
  "\n\004icon\030\005 \001(\t\022\016\n\006author\030\006 \001(\t\022\017\n\007version\030"
  "\007 \001(\001\022\r\n\005infor\030\010 \001(\t\022=\n\013trackParams\030\t \003("
  "\0132(.infinity.module.engine.Engine.parame"
  "ter\022<\n\nnoteParams\030\n \003(\0132(.infinity.modul"
  "e.engine.Engine.parameter\022\023\n\013checkMethod"
  "\030\013 \001(\r\022\021\n\tautoCheck\030\014 \001(\010\022\014\n\004eula\030\r \001(\t\022"
  "\023\n\013warrantDate\030\016 \001(\t\022\023\n\013warrantTime\030\017 \001("
  "\t\032D\n\tparameter\022\014\n\004name\030\001 \001(\t\022\013\n\003min\030\002 \001("
  "\001\022\013\n\003max\030\003 \001(\001\022\017\n\007default\030\004 \001(\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_engine_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_engine_2eproto = {
  false, false, 479, descriptor_table_protodef_engine_2eproto, "engine.proto", 
  &descriptor_table_engine_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_engine_2eproto::offsets,
  file_level_metadata_engine_2eproto, file_level_enum_descriptors_engine_2eproto, file_level_service_descriptors_engine_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_engine_2eproto_getter() {
  return &descriptor_table_engine_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_engine_2eproto(&descriptor_table_engine_2eproto);
namespace infinity {
namespace module {
namespace engine {

// ===================================================================

class Engine_parameter::_Internal {
 public:
};

Engine_parameter::Engine_parameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:infinity.module.engine.Engine.parameter)
}
Engine_parameter::Engine_parameter(const Engine_parameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&default__) -
    reinterpret_cast<char*>(&min_)) + sizeof(default__));
  // @@protoc_insertion_point(copy_constructor:infinity.module.engine.Engine.parameter)
}

inline void Engine_parameter::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&min_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&default__) -
    reinterpret_cast<char*>(&min_)) + sizeof(default__));
}

Engine_parameter::~Engine_parameter() {
  // @@protoc_insertion_point(destructor:infinity.module.engine.Engine.parameter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Engine_parameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Engine_parameter::ArenaDtor(void* object) {
  Engine_parameter* _this = reinterpret_cast< Engine_parameter* >(object);
  (void)_this;
}
void Engine_parameter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Engine_parameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Engine_parameter::Clear() {
// @@protoc_insertion_point(message_clear_start:infinity.module.engine.Engine.parameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&default__) -
      reinterpret_cast<char*>(&min_)) + sizeof(default__));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Engine_parameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infinity.module.engine.Engine.parameter.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double default = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          default__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Engine_parameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:infinity.module.engine.Engine.parameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "infinity.module.engine.Engine.parameter.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // double min = 2;
  if (!(this->_internal_min() <= 0 && this->_internal_min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_min(), target);
  }

  // double max = 3;
  if (!(this->_internal_max() <= 0 && this->_internal_max() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max(), target);
  }

  // double default = 4;
  if (!(this->_internal_default_() <= 0 && this->_internal_default_() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_default_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:infinity.module.engine.Engine.parameter)
  return target;
}

size_t Engine_parameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:infinity.module.engine.Engine.parameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // double min = 2;
  if (!(this->_internal_min() <= 0 && this->_internal_min() >= 0)) {
    total_size += 1 + 8;
  }

  // double max = 3;
  if (!(this->_internal_max() <= 0 && this->_internal_max() >= 0)) {
    total_size += 1 + 8;
  }

  // double default = 4;
  if (!(this->_internal_default_() <= 0 && this->_internal_default_() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Engine_parameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Engine_parameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Engine_parameter::GetClassData() const { return &_class_data_; }

void Engine_parameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Engine_parameter *>(to)->MergeFrom(
      static_cast<const Engine_parameter &>(from));
}


void Engine_parameter::MergeFrom(const Engine_parameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:infinity.module.engine.Engine.parameter)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!(from._internal_min() <= 0 && from._internal_min() >= 0)) {
    _internal_set_min(from._internal_min());
  }
  if (!(from._internal_max() <= 0 && from._internal_max() >= 0)) {
    _internal_set_max(from._internal_max());
  }
  if (!(from._internal_default_() <= 0 && from._internal_default_() >= 0)) {
    _internal_set_default_(from._internal_default_());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Engine_parameter::CopyFrom(const Engine_parameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:infinity.module.engine.Engine.parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Engine_parameter::IsInitialized() const {
  return true;
}

void Engine_parameter::InternalSwap(Engine_parameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Engine_parameter, default__)
      + sizeof(Engine_parameter::default__)
      - PROTOBUF_FIELD_OFFSET(Engine_parameter, min_)>(
          reinterpret_cast<char*>(&min_),
          reinterpret_cast<char*>(&other->min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Engine_parameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_engine_2eproto_getter, &descriptor_table_engine_2eproto_once,
      file_level_metadata_engine_2eproto[0]);
}

// ===================================================================

class Engine::_Internal {
 public:
};

Engine::Engine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  trackparams_(arena),
  noteparams_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:infinity.module.engine.Engine)
}
Engine::Engine(const Engine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      trackparams_(from.trackparams_),
      noteparams_(from.noteparams_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  main_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_main().empty()) {
    main_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_main(), 
      GetArenaForAllocation());
  }
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_icon().empty()) {
    icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_icon(), 
      GetArenaForAllocation());
  }
  author_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_author().empty()) {
    author_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_author(), 
      GetArenaForAllocation());
  }
  infor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_infor().empty()) {
    infor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_infor(), 
      GetArenaForAllocation());
  }
  eula_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_eula().empty()) {
    eula_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_eula(), 
      GetArenaForAllocation());
  }
  warrantdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_warrantdate().empty()) {
    warrantdate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_warrantdate(), 
      GetArenaForAllocation());
  }
  warranttime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_warranttime().empty()) {
    warranttime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_warranttime(), 
      GetArenaForAllocation());
  }
  ::memcpy(&imt_version_, &from.imt_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&checkmethod_) -
    reinterpret_cast<char*>(&imt_version_)) + sizeof(checkmethod_));
  // @@protoc_insertion_point(copy_constructor:infinity.module.engine.Engine)
}

inline void Engine::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
main_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
author_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
infor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
eula_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
warrantdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
warranttime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&imt_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&checkmethod_) -
    reinterpret_cast<char*>(&imt_version_)) + sizeof(checkmethod_));
}

Engine::~Engine() {
  // @@protoc_insertion_point(destructor:infinity.module.engine.Engine)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Engine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  main_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  author_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  infor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  eula_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  warrantdate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  warranttime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Engine::ArenaDtor(void* object) {
  Engine* _this = reinterpret_cast< Engine* >(object);
  (void)_this;
}
void Engine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Engine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Engine::Clear() {
// @@protoc_insertion_point(message_clear_start:infinity.module.engine.Engine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trackparams_.Clear();
  noteparams_.Clear();
  name_.ClearToEmpty();
  main_.ClearToEmpty();
  icon_.ClearToEmpty();
  author_.ClearToEmpty();
  infor_.ClearToEmpty();
  eula_.ClearToEmpty();
  warrantdate_.ClearToEmpty();
  warranttime_.ClearToEmpty();
  ::memset(&imt_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&checkmethod_) -
      reinterpret_cast<char*>(&imt_version_)) + sizeof(checkmethod_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Engine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double IMT_Version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          imt_version_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infinity.module.engine.Engine.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string main = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_main();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infinity.module.engine.Engine.main"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool splitGroup = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          splitgroup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string icon = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infinity.module.engine.Engine.icon"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string author = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_author();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infinity.module.engine.Engine.author"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double version = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string infor = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_infor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infinity.module.engine.Engine.infor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .infinity.module.engine.Engine.parameter trackParams = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trackparams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .infinity.module.engine.Engine.parameter noteParams = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_noteparams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 checkMethod = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          checkmethod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool autoCheck = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          autocheck_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string eula = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_eula();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infinity.module.engine.Engine.eula"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string warrantDate = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_warrantdate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infinity.module.engine.Engine.warrantDate"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string warrantTime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_warranttime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infinity.module.engine.Engine.warrantTime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Engine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:infinity.module.engine.Engine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double IMT_Version = 1;
  if (!(this->_internal_imt_version() <= 0 && this->_internal_imt_version() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_imt_version(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "infinity.module.engine.Engine.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string main = 3;
  if (!this->_internal_main().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_main().data(), static_cast<int>(this->_internal_main().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "infinity.module.engine.Engine.main");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_main(), target);
  }

  // bool splitGroup = 4;
  if (this->_internal_splitgroup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_splitgroup(), target);
  }

  // string icon = 5;
  if (!this->_internal_icon().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "infinity.module.engine.Engine.icon");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_icon(), target);
  }

  // string author = 6;
  if (!this->_internal_author().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_author().data(), static_cast<int>(this->_internal_author().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "infinity.module.engine.Engine.author");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_author(), target);
  }

  // double version = 7;
  if (!(this->_internal_version() <= 0 && this->_internal_version() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_version(), target);
  }

  // string infor = 8;
  if (!this->_internal_infor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_infor().data(), static_cast<int>(this->_internal_infor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "infinity.module.engine.Engine.infor");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_infor(), target);
  }

  // repeated .infinity.module.engine.Engine.parameter trackParams = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trackparams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_trackparams(i), target, stream);
  }

  // repeated .infinity.module.engine.Engine.parameter noteParams = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_noteparams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_noteparams(i), target, stream);
  }

  // uint32 checkMethod = 11;
  if (this->_internal_checkmethod() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_checkmethod(), target);
  }

  // bool autoCheck = 12;
  if (this->_internal_autocheck() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_autocheck(), target);
  }

  // string eula = 13;
  if (!this->_internal_eula().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_eula().data(), static_cast<int>(this->_internal_eula().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "infinity.module.engine.Engine.eula");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_eula(), target);
  }

  // string warrantDate = 14;
  if (!this->_internal_warrantdate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_warrantdate().data(), static_cast<int>(this->_internal_warrantdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "infinity.module.engine.Engine.warrantDate");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_warrantdate(), target);
  }

  // string warrantTime = 15;
  if (!this->_internal_warranttime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_warranttime().data(), static_cast<int>(this->_internal_warranttime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "infinity.module.engine.Engine.warrantTime");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_warranttime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:infinity.module.engine.Engine)
  return target;
}

size_t Engine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:infinity.module.engine.Engine)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .infinity.module.engine.Engine.parameter trackParams = 9;
  total_size += 1UL * this->_internal_trackparams_size();
  for (const auto& msg : this->trackparams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .infinity.module.engine.Engine.parameter noteParams = 10;
  total_size += 1UL * this->_internal_noteparams_size();
  for (const auto& msg : this->noteparams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string main = 3;
  if (!this->_internal_main().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_main());
  }

  // string icon = 5;
  if (!this->_internal_icon().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icon());
  }

  // string author = 6;
  if (!this->_internal_author().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_author());
  }

  // string infor = 8;
  if (!this->_internal_infor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_infor());
  }

  // string eula = 13;
  if (!this->_internal_eula().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_eula());
  }

  // string warrantDate = 14;
  if (!this->_internal_warrantdate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_warrantdate());
  }

  // string warrantTime = 15;
  if (!this->_internal_warranttime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_warranttime());
  }

  // double IMT_Version = 1;
  if (!(this->_internal_imt_version() <= 0 && this->_internal_imt_version() >= 0)) {
    total_size += 1 + 8;
  }

  // double version = 7;
  if (!(this->_internal_version() <= 0 && this->_internal_version() >= 0)) {
    total_size += 1 + 8;
  }

  // bool splitGroup = 4;
  if (this->_internal_splitgroup() != 0) {
    total_size += 1 + 1;
  }

  // bool autoCheck = 12;
  if (this->_internal_autocheck() != 0) {
    total_size += 1 + 1;
  }

  // uint32 checkMethod = 11;
  if (this->_internal_checkmethod() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_checkmethod());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Engine::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Engine::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Engine::GetClassData() const { return &_class_data_; }

void Engine::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Engine *>(to)->MergeFrom(
      static_cast<const Engine &>(from));
}


void Engine::MergeFrom(const Engine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:infinity.module.engine.Engine)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trackparams_.MergeFrom(from.trackparams_);
  noteparams_.MergeFrom(from.noteparams_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_main().empty()) {
    _internal_set_main(from._internal_main());
  }
  if (!from._internal_icon().empty()) {
    _internal_set_icon(from._internal_icon());
  }
  if (!from._internal_author().empty()) {
    _internal_set_author(from._internal_author());
  }
  if (!from._internal_infor().empty()) {
    _internal_set_infor(from._internal_infor());
  }
  if (!from._internal_eula().empty()) {
    _internal_set_eula(from._internal_eula());
  }
  if (!from._internal_warrantdate().empty()) {
    _internal_set_warrantdate(from._internal_warrantdate());
  }
  if (!from._internal_warranttime().empty()) {
    _internal_set_warranttime(from._internal_warranttime());
  }
  if (!(from._internal_imt_version() <= 0 && from._internal_imt_version() >= 0)) {
    _internal_set_imt_version(from._internal_imt_version());
  }
  if (!(from._internal_version() <= 0 && from._internal_version() >= 0)) {
    _internal_set_version(from._internal_version());
  }
  if (from._internal_splitgroup() != 0) {
    _internal_set_splitgroup(from._internal_splitgroup());
  }
  if (from._internal_autocheck() != 0) {
    _internal_set_autocheck(from._internal_autocheck());
  }
  if (from._internal_checkmethod() != 0) {
    _internal_set_checkmethod(from._internal_checkmethod());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Engine::CopyFrom(const Engine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:infinity.module.engine.Engine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Engine::IsInitialized() const {
  return true;
}

void Engine::InternalSwap(Engine* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  trackparams_.InternalSwap(&other->trackparams_);
  noteparams_.InternalSwap(&other->noteparams_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &main_, GetArenaForAllocation(),
      &other->main_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &icon_, GetArenaForAllocation(),
      &other->icon_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &author_, GetArenaForAllocation(),
      &other->author_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &infor_, GetArenaForAllocation(),
      &other->infor_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &eula_, GetArenaForAllocation(),
      &other->eula_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &warrantdate_, GetArenaForAllocation(),
      &other->warrantdate_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &warranttime_, GetArenaForAllocation(),
      &other->warranttime_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Engine, checkmethod_)
      + sizeof(Engine::checkmethod_)
      - PROTOBUF_FIELD_OFFSET(Engine, imt_version_)>(
          reinterpret_cast<char*>(&imt_version_),
          reinterpret_cast<char*>(&other->imt_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Engine::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_engine_2eproto_getter, &descriptor_table_engine_2eproto_once,
      file_level_metadata_engine_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace engine
}  // namespace module
}  // namespace infinity
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::infinity::module::engine::Engine_parameter* Arena::CreateMaybeMessage< ::infinity::module::engine::Engine_parameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::infinity::module::engine::Engine_parameter >(arena);
}
template<> PROTOBUF_NOINLINE ::infinity::module::engine::Engine* Arena::CreateMaybeMessage< ::infinity::module::engine::Engine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::infinity::module::engine::Engine >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
