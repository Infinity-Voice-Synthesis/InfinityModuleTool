// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: library.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_library_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_library_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_library_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_library_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_library_2eproto;
namespace infinity {
namespace module {
namespace library {
class Library;
struct LibraryDefaultTypeInternal;
extern LibraryDefaultTypeInternal _Library_default_instance_;
class Library_link;
struct Library_linkDefaultTypeInternal;
extern Library_linkDefaultTypeInternal _Library_link_default_instance_;
}  // namespace library
}  // namespace module
}  // namespace infinity
PROTOBUF_NAMESPACE_OPEN
template<> ::infinity::module::library::Library* Arena::CreateMaybeMessage<::infinity::module::library::Library>(Arena*);
template<> ::infinity::module::library::Library_link* Arena::CreateMaybeMessage<::infinity::module::library::Library_link>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace infinity {
namespace module {
namespace library {

// ===================================================================

class Library_link final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:infinity.module.library.Library.link) */ {
 public:
  inline Library_link() : Library_link(nullptr) {}
  ~Library_link() override;
  explicit constexpr Library_link(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Library_link(const Library_link& from);
  Library_link(Library_link&& from) noexcept
    : Library_link() {
    *this = ::std::move(from);
  }

  inline Library_link& operator=(const Library_link& from) {
    CopyFrom(from);
    return *this;
  }
  inline Library_link& operator=(Library_link&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Library_link& default_instance() {
    return *internal_default_instance();
  }
  static inline const Library_link* internal_default_instance() {
    return reinterpret_cast<const Library_link*>(
               &_Library_link_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Library_link& a, Library_link& b) {
    a.Swap(&b);
  }
  inline void Swap(Library_link* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Library_link* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Library_link* New() const final {
    return new Library_link();
  }

  Library_link* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Library_link>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Library_link& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Library_link& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Library_link* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "infinity.module.library.Library.link";
  }
  protected:
  explicit Library_link(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPitchFieldNumber = 1,
    kSdbFieldNumber = 2,
  };
  // string pitch = 1;
  void clear_pitch();
  const std::string& pitch() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pitch(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pitch();
  PROTOBUF_MUST_USE_RESULT std::string* release_pitch();
  void set_allocated_pitch(std::string* pitch);
  private:
  const std::string& _internal_pitch() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pitch(const std::string& value);
  std::string* _internal_mutable_pitch();
  public:

  // string sdb = 2;
  void clear_sdb();
  const std::string& sdb() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sdb(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sdb();
  PROTOBUF_MUST_USE_RESULT std::string* release_sdb();
  void set_allocated_sdb(std::string* sdb);
  private:
  const std::string& _internal_sdb() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sdb(const std::string& value);
  std::string* _internal_mutable_sdb();
  public:

  // @@protoc_insertion_point(class_scope:infinity.module.library.Library.link)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pitch_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdb_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

class Library final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:infinity.module.library.Library) */ {
 public:
  inline Library() : Library(nullptr) {}
  ~Library() override;
  explicit constexpr Library(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Library(const Library& from);
  Library(Library&& from) noexcept
    : Library() {
    *this = ::std::move(from);
  }

  inline Library& operator=(const Library& from) {
    CopyFrom(from);
    return *this;
  }
  inline Library& operator=(Library&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Library& default_instance() {
    return *internal_default_instance();
  }
  static inline const Library* internal_default_instance() {
    return reinterpret_cast<const Library*>(
               &_Library_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Library& a, Library& b) {
    a.Swap(&b);
  }
  inline void Swap(Library* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Library* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Library* New() const final {
    return new Library();
  }

  Library* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Library>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Library& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Library& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Library* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "infinity.module.library.Library";
  }
  protected:
  explicit Library(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Library_link link;

  // accessors -------------------------------------------------------

  enum : int {
    kSdblistFieldNumber = 9,
    kSdblinkFieldNumber = 11,
    kNameFieldNumber = 2,
    kEngineFieldNumber = 3,
    kDictionaryFieldNumber = 4,
    kIconFieldNumber = 5,
    kAuthorFieldNumber = 6,
    kInforFieldNumber = 8,
    kSdbdefaultFieldNumber = 10,
    kEulaFieldNumber = 14,
    kWarrantDateFieldNumber = 15,
    kWarrantTimeFieldNumber = 16,
    kIMTVersionFieldNumber = 1,
    kVersionFieldNumber = 7,
    kCheckMethodFieldNumber = 12,
    kAutoCheckFieldNumber = 13,
  };
  // repeated string sdblist = 9;
  int sdblist_size() const;
  private:
  int _internal_sdblist_size() const;
  public:
  void clear_sdblist();
  const std::string& sdblist(int index) const;
  std::string* mutable_sdblist(int index);
  void set_sdblist(int index, const std::string& value);
  void set_sdblist(int index, std::string&& value);
  void set_sdblist(int index, const char* value);
  void set_sdblist(int index, const char* value, size_t size);
  std::string* add_sdblist();
  void add_sdblist(const std::string& value);
  void add_sdblist(std::string&& value);
  void add_sdblist(const char* value);
  void add_sdblist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& sdblist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_sdblist();
  private:
  const std::string& _internal_sdblist(int index) const;
  std::string* _internal_add_sdblist();
  public:

  // repeated .infinity.module.library.Library.link sdblink = 11;
  int sdblink_size() const;
  private:
  int _internal_sdblink_size() const;
  public:
  void clear_sdblink();
  ::infinity::module::library::Library_link* mutable_sdblink(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::infinity::module::library::Library_link >*
      mutable_sdblink();
  private:
  const ::infinity::module::library::Library_link& _internal_sdblink(int index) const;
  ::infinity::module::library::Library_link* _internal_add_sdblink();
  public:
  const ::infinity::module::library::Library_link& sdblink(int index) const;
  ::infinity::module::library::Library_link* add_sdblink();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::infinity::module::library::Library_link >&
      sdblink() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string engine = 3;
  void clear_engine();
  const std::string& engine() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_engine(ArgT0&& arg0, ArgT... args);
  std::string* mutable_engine();
  PROTOBUF_MUST_USE_RESULT std::string* release_engine();
  void set_allocated_engine(std::string* engine);
  private:
  const std::string& _internal_engine() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_engine(const std::string& value);
  std::string* _internal_mutable_engine();
  public:

  // string dictionary = 4;
  void clear_dictionary();
  const std::string& dictionary() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dictionary(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dictionary();
  PROTOBUF_MUST_USE_RESULT std::string* release_dictionary();
  void set_allocated_dictionary(std::string* dictionary);
  private:
  const std::string& _internal_dictionary() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dictionary(const std::string& value);
  std::string* _internal_mutable_dictionary();
  public:

  // string icon = 5;
  void clear_icon();
  const std::string& icon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_icon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_icon();
  PROTOBUF_MUST_USE_RESULT std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // string author = 6;
  void clear_author();
  const std::string& author() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_author(ArgT0&& arg0, ArgT... args);
  std::string* mutable_author();
  PROTOBUF_MUST_USE_RESULT std::string* release_author();
  void set_allocated_author(std::string* author);
  private:
  const std::string& _internal_author() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_author(const std::string& value);
  std::string* _internal_mutable_author();
  public:

  // string infor = 8;
  void clear_infor();
  const std::string& infor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_infor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_infor();
  PROTOBUF_MUST_USE_RESULT std::string* release_infor();
  void set_allocated_infor(std::string* infor);
  private:
  const std::string& _internal_infor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_infor(const std::string& value);
  std::string* _internal_mutable_infor();
  public:

  // string sdbdefault = 10;
  void clear_sdbdefault();
  const std::string& sdbdefault() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sdbdefault(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sdbdefault();
  PROTOBUF_MUST_USE_RESULT std::string* release_sdbdefault();
  void set_allocated_sdbdefault(std::string* sdbdefault);
  private:
  const std::string& _internal_sdbdefault() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sdbdefault(const std::string& value);
  std::string* _internal_mutable_sdbdefault();
  public:

  // string eula = 14;
  void clear_eula();
  const std::string& eula() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_eula(ArgT0&& arg0, ArgT... args);
  std::string* mutable_eula();
  PROTOBUF_MUST_USE_RESULT std::string* release_eula();
  void set_allocated_eula(std::string* eula);
  private:
  const std::string& _internal_eula() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_eula(const std::string& value);
  std::string* _internal_mutable_eula();
  public:

  // string warrantDate = 15;
  void clear_warrantdate();
  const std::string& warrantdate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_warrantdate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_warrantdate();
  PROTOBUF_MUST_USE_RESULT std::string* release_warrantdate();
  void set_allocated_warrantdate(std::string* warrantdate);
  private:
  const std::string& _internal_warrantdate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_warrantdate(const std::string& value);
  std::string* _internal_mutable_warrantdate();
  public:

  // string warrantTime = 16;
  void clear_warranttime();
  const std::string& warranttime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_warranttime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_warranttime();
  PROTOBUF_MUST_USE_RESULT std::string* release_warranttime();
  void set_allocated_warranttime(std::string* warranttime);
  private:
  const std::string& _internal_warranttime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_warranttime(const std::string& value);
  std::string* _internal_mutable_warranttime();
  public:

  // double IMT_Version = 1;
  void clear_imt_version();
  double imt_version() const;
  void set_imt_version(double value);
  private:
  double _internal_imt_version() const;
  void _internal_set_imt_version(double value);
  public:

  // double version = 7;
  void clear_version();
  double version() const;
  void set_version(double value);
  private:
  double _internal_version() const;
  void _internal_set_version(double value);
  public:

  // uint32 checkMethod = 12;
  void clear_checkmethod();
  ::PROTOBUF_NAMESPACE_ID::uint32 checkmethod() const;
  void set_checkmethod(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_checkmethod() const;
  void _internal_set_checkmethod(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool autoCheck = 13;
  void clear_autocheck();
  bool autocheck() const;
  void set_autocheck(bool value);
  private:
  bool _internal_autocheck() const;
  void _internal_set_autocheck(bool value);
  public:

  // @@protoc_insertion_point(class_scope:infinity.module.library.Library)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> sdblist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::infinity::module::library::Library_link > sdblink_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr engine_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dictionary_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr author_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr infor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdbdefault_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eula_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr warrantdate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr warranttime_;
  double imt_version_;
  double version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 checkmethod_;
  bool autocheck_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_library_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Library_link

// string pitch = 1;
inline void Library_link::clear_pitch() {
  pitch_.ClearToEmpty();
}
inline const std::string& Library_link::pitch() const {
  // @@protoc_insertion_point(field_get:infinity.module.library.Library.link.pitch)
  return _internal_pitch();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Library_link::set_pitch(ArgT0&& arg0, ArgT... args) {
 
 pitch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:infinity.module.library.Library.link.pitch)
}
inline std::string* Library_link::mutable_pitch() {
  std::string* _s = _internal_mutable_pitch();
  // @@protoc_insertion_point(field_mutable:infinity.module.library.Library.link.pitch)
  return _s;
}
inline const std::string& Library_link::_internal_pitch() const {
  return pitch_.Get();
}
inline void Library_link::_internal_set_pitch(const std::string& value) {
  
  pitch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Library_link::_internal_mutable_pitch() {
  
  return pitch_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Library_link::release_pitch() {
  // @@protoc_insertion_point(field_release:infinity.module.library.Library.link.pitch)
  return pitch_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Library_link::set_allocated_pitch(std::string* pitch) {
  if (pitch != nullptr) {
    
  } else {
    
  }
  pitch_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pitch,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:infinity.module.library.Library.link.pitch)
}

// string sdb = 2;
inline void Library_link::clear_sdb() {
  sdb_.ClearToEmpty();
}
inline const std::string& Library_link::sdb() const {
  // @@protoc_insertion_point(field_get:infinity.module.library.Library.link.sdb)
  return _internal_sdb();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Library_link::set_sdb(ArgT0&& arg0, ArgT... args) {
 
 sdb_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:infinity.module.library.Library.link.sdb)
}
inline std::string* Library_link::mutable_sdb() {
  std::string* _s = _internal_mutable_sdb();
  // @@protoc_insertion_point(field_mutable:infinity.module.library.Library.link.sdb)
  return _s;
}
inline const std::string& Library_link::_internal_sdb() const {
  return sdb_.Get();
}
inline void Library_link::_internal_set_sdb(const std::string& value) {
  
  sdb_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Library_link::_internal_mutable_sdb() {
  
  return sdb_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Library_link::release_sdb() {
  // @@protoc_insertion_point(field_release:infinity.module.library.Library.link.sdb)
  return sdb_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Library_link::set_allocated_sdb(std::string* sdb) {
  if (sdb != nullptr) {
    
  } else {
    
  }
  sdb_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sdb,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:infinity.module.library.Library.link.sdb)
}

// -------------------------------------------------------------------

// Library

// double IMT_Version = 1;
inline void Library::clear_imt_version() {
  imt_version_ = 0;
}
inline double Library::_internal_imt_version() const {
  return imt_version_;
}
inline double Library::imt_version() const {
  // @@protoc_insertion_point(field_get:infinity.module.library.Library.IMT_Version)
  return _internal_imt_version();
}
inline void Library::_internal_set_imt_version(double value) {
  
  imt_version_ = value;
}
inline void Library::set_imt_version(double value) {
  _internal_set_imt_version(value);
  // @@protoc_insertion_point(field_set:infinity.module.library.Library.IMT_Version)
}

// string name = 2;
inline void Library::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Library::name() const {
  // @@protoc_insertion_point(field_get:infinity.module.library.Library.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Library::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:infinity.module.library.Library.name)
}
inline std::string* Library::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:infinity.module.library.Library.name)
  return _s;
}
inline const std::string& Library::_internal_name() const {
  return name_.Get();
}
inline void Library::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Library::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Library::release_name() {
  // @@protoc_insertion_point(field_release:infinity.module.library.Library.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Library::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:infinity.module.library.Library.name)
}

// string engine = 3;
inline void Library::clear_engine() {
  engine_.ClearToEmpty();
}
inline const std::string& Library::engine() const {
  // @@protoc_insertion_point(field_get:infinity.module.library.Library.engine)
  return _internal_engine();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Library::set_engine(ArgT0&& arg0, ArgT... args) {
 
 engine_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:infinity.module.library.Library.engine)
}
inline std::string* Library::mutable_engine() {
  std::string* _s = _internal_mutable_engine();
  // @@protoc_insertion_point(field_mutable:infinity.module.library.Library.engine)
  return _s;
}
inline const std::string& Library::_internal_engine() const {
  return engine_.Get();
}
inline void Library::_internal_set_engine(const std::string& value) {
  
  engine_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Library::_internal_mutable_engine() {
  
  return engine_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Library::release_engine() {
  // @@protoc_insertion_point(field_release:infinity.module.library.Library.engine)
  return engine_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Library::set_allocated_engine(std::string* engine) {
  if (engine != nullptr) {
    
  } else {
    
  }
  engine_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), engine,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:infinity.module.library.Library.engine)
}

// string dictionary = 4;
inline void Library::clear_dictionary() {
  dictionary_.ClearToEmpty();
}
inline const std::string& Library::dictionary() const {
  // @@protoc_insertion_point(field_get:infinity.module.library.Library.dictionary)
  return _internal_dictionary();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Library::set_dictionary(ArgT0&& arg0, ArgT... args) {
 
 dictionary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:infinity.module.library.Library.dictionary)
}
inline std::string* Library::mutable_dictionary() {
  std::string* _s = _internal_mutable_dictionary();
  // @@protoc_insertion_point(field_mutable:infinity.module.library.Library.dictionary)
  return _s;
}
inline const std::string& Library::_internal_dictionary() const {
  return dictionary_.Get();
}
inline void Library::_internal_set_dictionary(const std::string& value) {
  
  dictionary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Library::_internal_mutable_dictionary() {
  
  return dictionary_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Library::release_dictionary() {
  // @@protoc_insertion_point(field_release:infinity.module.library.Library.dictionary)
  return dictionary_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Library::set_allocated_dictionary(std::string* dictionary) {
  if (dictionary != nullptr) {
    
  } else {
    
  }
  dictionary_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dictionary,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:infinity.module.library.Library.dictionary)
}

// string icon = 5;
inline void Library::clear_icon() {
  icon_.ClearToEmpty();
}
inline const std::string& Library::icon() const {
  // @@protoc_insertion_point(field_get:infinity.module.library.Library.icon)
  return _internal_icon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Library::set_icon(ArgT0&& arg0, ArgT... args) {
 
 icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:infinity.module.library.Library.icon)
}
inline std::string* Library::mutable_icon() {
  std::string* _s = _internal_mutable_icon();
  // @@protoc_insertion_point(field_mutable:infinity.module.library.Library.icon)
  return _s;
}
inline const std::string& Library::_internal_icon() const {
  return icon_.Get();
}
inline void Library::_internal_set_icon(const std::string& value) {
  
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Library::_internal_mutable_icon() {
  
  return icon_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Library::release_icon() {
  // @@protoc_insertion_point(field_release:infinity.module.library.Library.icon)
  return icon_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Library::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    
  } else {
    
  }
  icon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:infinity.module.library.Library.icon)
}

// string author = 6;
inline void Library::clear_author() {
  author_.ClearToEmpty();
}
inline const std::string& Library::author() const {
  // @@protoc_insertion_point(field_get:infinity.module.library.Library.author)
  return _internal_author();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Library::set_author(ArgT0&& arg0, ArgT... args) {
 
 author_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:infinity.module.library.Library.author)
}
inline std::string* Library::mutable_author() {
  std::string* _s = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:infinity.module.library.Library.author)
  return _s;
}
inline const std::string& Library::_internal_author() const {
  return author_.Get();
}
inline void Library::_internal_set_author(const std::string& value) {
  
  author_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Library::_internal_mutable_author() {
  
  return author_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Library::release_author() {
  // @@protoc_insertion_point(field_release:infinity.module.library.Library.author)
  return author_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Library::set_allocated_author(std::string* author) {
  if (author != nullptr) {
    
  } else {
    
  }
  author_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), author,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:infinity.module.library.Library.author)
}

// double version = 7;
inline void Library::clear_version() {
  version_ = 0;
}
inline double Library::_internal_version() const {
  return version_;
}
inline double Library::version() const {
  // @@protoc_insertion_point(field_get:infinity.module.library.Library.version)
  return _internal_version();
}
inline void Library::_internal_set_version(double value) {
  
  version_ = value;
}
inline void Library::set_version(double value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:infinity.module.library.Library.version)
}

// string infor = 8;
inline void Library::clear_infor() {
  infor_.ClearToEmpty();
}
inline const std::string& Library::infor() const {
  // @@protoc_insertion_point(field_get:infinity.module.library.Library.infor)
  return _internal_infor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Library::set_infor(ArgT0&& arg0, ArgT... args) {
 
 infor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:infinity.module.library.Library.infor)
}
inline std::string* Library::mutable_infor() {
  std::string* _s = _internal_mutable_infor();
  // @@protoc_insertion_point(field_mutable:infinity.module.library.Library.infor)
  return _s;
}
inline const std::string& Library::_internal_infor() const {
  return infor_.Get();
}
inline void Library::_internal_set_infor(const std::string& value) {
  
  infor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Library::_internal_mutable_infor() {
  
  return infor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Library::release_infor() {
  // @@protoc_insertion_point(field_release:infinity.module.library.Library.infor)
  return infor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Library::set_allocated_infor(std::string* infor) {
  if (infor != nullptr) {
    
  } else {
    
  }
  infor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), infor,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:infinity.module.library.Library.infor)
}

// repeated string sdblist = 9;
inline int Library::_internal_sdblist_size() const {
  return sdblist_.size();
}
inline int Library::sdblist_size() const {
  return _internal_sdblist_size();
}
inline void Library::clear_sdblist() {
  sdblist_.Clear();
}
inline std::string* Library::add_sdblist() {
  std::string* _s = _internal_add_sdblist();
  // @@protoc_insertion_point(field_add_mutable:infinity.module.library.Library.sdblist)
  return _s;
}
inline const std::string& Library::_internal_sdblist(int index) const {
  return sdblist_.Get(index);
}
inline const std::string& Library::sdblist(int index) const {
  // @@protoc_insertion_point(field_get:infinity.module.library.Library.sdblist)
  return _internal_sdblist(index);
}
inline std::string* Library::mutable_sdblist(int index) {
  // @@protoc_insertion_point(field_mutable:infinity.module.library.Library.sdblist)
  return sdblist_.Mutable(index);
}
inline void Library::set_sdblist(int index, const std::string& value) {
  sdblist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:infinity.module.library.Library.sdblist)
}
inline void Library::set_sdblist(int index, std::string&& value) {
  sdblist_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:infinity.module.library.Library.sdblist)
}
inline void Library::set_sdblist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sdblist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:infinity.module.library.Library.sdblist)
}
inline void Library::set_sdblist(int index, const char* value, size_t size) {
  sdblist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:infinity.module.library.Library.sdblist)
}
inline std::string* Library::_internal_add_sdblist() {
  return sdblist_.Add();
}
inline void Library::add_sdblist(const std::string& value) {
  sdblist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:infinity.module.library.Library.sdblist)
}
inline void Library::add_sdblist(std::string&& value) {
  sdblist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:infinity.module.library.Library.sdblist)
}
inline void Library::add_sdblist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sdblist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:infinity.module.library.Library.sdblist)
}
inline void Library::add_sdblist(const char* value, size_t size) {
  sdblist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:infinity.module.library.Library.sdblist)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Library::sdblist() const {
  // @@protoc_insertion_point(field_list:infinity.module.library.Library.sdblist)
  return sdblist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Library::mutable_sdblist() {
  // @@protoc_insertion_point(field_mutable_list:infinity.module.library.Library.sdblist)
  return &sdblist_;
}

// string sdbdefault = 10;
inline void Library::clear_sdbdefault() {
  sdbdefault_.ClearToEmpty();
}
inline const std::string& Library::sdbdefault() const {
  // @@protoc_insertion_point(field_get:infinity.module.library.Library.sdbdefault)
  return _internal_sdbdefault();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Library::set_sdbdefault(ArgT0&& arg0, ArgT... args) {
 
 sdbdefault_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:infinity.module.library.Library.sdbdefault)
}
inline std::string* Library::mutable_sdbdefault() {
  std::string* _s = _internal_mutable_sdbdefault();
  // @@protoc_insertion_point(field_mutable:infinity.module.library.Library.sdbdefault)
  return _s;
}
inline const std::string& Library::_internal_sdbdefault() const {
  return sdbdefault_.Get();
}
inline void Library::_internal_set_sdbdefault(const std::string& value) {
  
  sdbdefault_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Library::_internal_mutable_sdbdefault() {
  
  return sdbdefault_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Library::release_sdbdefault() {
  // @@protoc_insertion_point(field_release:infinity.module.library.Library.sdbdefault)
  return sdbdefault_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Library::set_allocated_sdbdefault(std::string* sdbdefault) {
  if (sdbdefault != nullptr) {
    
  } else {
    
  }
  sdbdefault_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sdbdefault,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:infinity.module.library.Library.sdbdefault)
}

// repeated .infinity.module.library.Library.link sdblink = 11;
inline int Library::_internal_sdblink_size() const {
  return sdblink_.size();
}
inline int Library::sdblink_size() const {
  return _internal_sdblink_size();
}
inline void Library::clear_sdblink() {
  sdblink_.Clear();
}
inline ::infinity::module::library::Library_link* Library::mutable_sdblink(int index) {
  // @@protoc_insertion_point(field_mutable:infinity.module.library.Library.sdblink)
  return sdblink_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::infinity::module::library::Library_link >*
Library::mutable_sdblink() {
  // @@protoc_insertion_point(field_mutable_list:infinity.module.library.Library.sdblink)
  return &sdblink_;
}
inline const ::infinity::module::library::Library_link& Library::_internal_sdblink(int index) const {
  return sdblink_.Get(index);
}
inline const ::infinity::module::library::Library_link& Library::sdblink(int index) const {
  // @@protoc_insertion_point(field_get:infinity.module.library.Library.sdblink)
  return _internal_sdblink(index);
}
inline ::infinity::module::library::Library_link* Library::_internal_add_sdblink() {
  return sdblink_.Add();
}
inline ::infinity::module::library::Library_link* Library::add_sdblink() {
  ::infinity::module::library::Library_link* _add = _internal_add_sdblink();
  // @@protoc_insertion_point(field_add:infinity.module.library.Library.sdblink)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::infinity::module::library::Library_link >&
Library::sdblink() const {
  // @@protoc_insertion_point(field_list:infinity.module.library.Library.sdblink)
  return sdblink_;
}

// uint32 checkMethod = 12;
inline void Library::clear_checkmethod() {
  checkmethod_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Library::_internal_checkmethod() const {
  return checkmethod_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Library::checkmethod() const {
  // @@protoc_insertion_point(field_get:infinity.module.library.Library.checkMethod)
  return _internal_checkmethod();
}
inline void Library::_internal_set_checkmethod(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  checkmethod_ = value;
}
inline void Library::set_checkmethod(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_checkmethod(value);
  // @@protoc_insertion_point(field_set:infinity.module.library.Library.checkMethod)
}

// bool autoCheck = 13;
inline void Library::clear_autocheck() {
  autocheck_ = false;
}
inline bool Library::_internal_autocheck() const {
  return autocheck_;
}
inline bool Library::autocheck() const {
  // @@protoc_insertion_point(field_get:infinity.module.library.Library.autoCheck)
  return _internal_autocheck();
}
inline void Library::_internal_set_autocheck(bool value) {
  
  autocheck_ = value;
}
inline void Library::set_autocheck(bool value) {
  _internal_set_autocheck(value);
  // @@protoc_insertion_point(field_set:infinity.module.library.Library.autoCheck)
}

// string eula = 14;
inline void Library::clear_eula() {
  eula_.ClearToEmpty();
}
inline const std::string& Library::eula() const {
  // @@protoc_insertion_point(field_get:infinity.module.library.Library.eula)
  return _internal_eula();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Library::set_eula(ArgT0&& arg0, ArgT... args) {
 
 eula_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:infinity.module.library.Library.eula)
}
inline std::string* Library::mutable_eula() {
  std::string* _s = _internal_mutable_eula();
  // @@protoc_insertion_point(field_mutable:infinity.module.library.Library.eula)
  return _s;
}
inline const std::string& Library::_internal_eula() const {
  return eula_.Get();
}
inline void Library::_internal_set_eula(const std::string& value) {
  
  eula_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Library::_internal_mutable_eula() {
  
  return eula_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Library::release_eula() {
  // @@protoc_insertion_point(field_release:infinity.module.library.Library.eula)
  return eula_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Library::set_allocated_eula(std::string* eula) {
  if (eula != nullptr) {
    
  } else {
    
  }
  eula_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), eula,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:infinity.module.library.Library.eula)
}

// string warrantDate = 15;
inline void Library::clear_warrantdate() {
  warrantdate_.ClearToEmpty();
}
inline const std::string& Library::warrantdate() const {
  // @@protoc_insertion_point(field_get:infinity.module.library.Library.warrantDate)
  return _internal_warrantdate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Library::set_warrantdate(ArgT0&& arg0, ArgT... args) {
 
 warrantdate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:infinity.module.library.Library.warrantDate)
}
inline std::string* Library::mutable_warrantdate() {
  std::string* _s = _internal_mutable_warrantdate();
  // @@protoc_insertion_point(field_mutable:infinity.module.library.Library.warrantDate)
  return _s;
}
inline const std::string& Library::_internal_warrantdate() const {
  return warrantdate_.Get();
}
inline void Library::_internal_set_warrantdate(const std::string& value) {
  
  warrantdate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Library::_internal_mutable_warrantdate() {
  
  return warrantdate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Library::release_warrantdate() {
  // @@protoc_insertion_point(field_release:infinity.module.library.Library.warrantDate)
  return warrantdate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Library::set_allocated_warrantdate(std::string* warrantdate) {
  if (warrantdate != nullptr) {
    
  } else {
    
  }
  warrantdate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), warrantdate,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:infinity.module.library.Library.warrantDate)
}

// string warrantTime = 16;
inline void Library::clear_warranttime() {
  warranttime_.ClearToEmpty();
}
inline const std::string& Library::warranttime() const {
  // @@protoc_insertion_point(field_get:infinity.module.library.Library.warrantTime)
  return _internal_warranttime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Library::set_warranttime(ArgT0&& arg0, ArgT... args) {
 
 warranttime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:infinity.module.library.Library.warrantTime)
}
inline std::string* Library::mutable_warranttime() {
  std::string* _s = _internal_mutable_warranttime();
  // @@protoc_insertion_point(field_mutable:infinity.module.library.Library.warrantTime)
  return _s;
}
inline const std::string& Library::_internal_warranttime() const {
  return warranttime_.Get();
}
inline void Library::_internal_set_warranttime(const std::string& value) {
  
  warranttime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Library::_internal_mutable_warranttime() {
  
  return warranttime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Library::release_warranttime() {
  // @@protoc_insertion_point(field_release:infinity.module.library.Library.warrantTime)
  return warranttime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Library::set_allocated_warranttime(std::string* warranttime) {
  if (warranttime != nullptr) {
    
  } else {
    
  }
  warranttime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), warranttime,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:infinity.module.library.Library.warrantTime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace library
}  // namespace module
}  // namespace infinity

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_library_2eproto
