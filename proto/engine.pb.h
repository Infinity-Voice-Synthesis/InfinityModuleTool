// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: engine.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_engine_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_engine_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_engine_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_engine_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_engine_2eproto;
namespace infinity {
namespace module {
namespace engine {
class Engine;
struct EngineDefaultTypeInternal;
extern EngineDefaultTypeInternal _Engine_default_instance_;
class Engine_parameter;
struct Engine_parameterDefaultTypeInternal;
extern Engine_parameterDefaultTypeInternal _Engine_parameter_default_instance_;
}  // namespace engine
}  // namespace module
}  // namespace infinity
PROTOBUF_NAMESPACE_OPEN
template<> ::infinity::module::engine::Engine* Arena::CreateMaybeMessage<::infinity::module::engine::Engine>(Arena*);
template<> ::infinity::module::engine::Engine_parameter* Arena::CreateMaybeMessage<::infinity::module::engine::Engine_parameter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace infinity {
namespace module {
namespace engine {

// ===================================================================

class Engine_parameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:infinity.module.engine.Engine.parameter) */ {
 public:
  inline Engine_parameter() : Engine_parameter(nullptr) {}
  ~Engine_parameter() override;
  explicit constexpr Engine_parameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Engine_parameter(const Engine_parameter& from);
  Engine_parameter(Engine_parameter&& from) noexcept
    : Engine_parameter() {
    *this = ::std::move(from);
  }

  inline Engine_parameter& operator=(const Engine_parameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Engine_parameter& operator=(Engine_parameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Engine_parameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const Engine_parameter* internal_default_instance() {
    return reinterpret_cast<const Engine_parameter*>(
               &_Engine_parameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Engine_parameter& a, Engine_parameter& b) {
    a.Swap(&b);
  }
  inline void Swap(Engine_parameter* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Engine_parameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Engine_parameter* New() const final {
    return new Engine_parameter();
  }

  Engine_parameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Engine_parameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Engine_parameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Engine_parameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Engine_parameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "infinity.module.engine.Engine.parameter";
  }
  protected:
  explicit Engine_parameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMinFieldNumber = 2,
    kMaxFieldNumber = 3,
    kDefaultFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // double min = 2;
  void clear_min();
  double min() const;
  void set_min(double value);
  private:
  double _internal_min() const;
  void _internal_set_min(double value);
  public:

  // double max = 3;
  void clear_max();
  double max() const;
  void set_max(double value);
  private:
  double _internal_max() const;
  void _internal_set_max(double value);
  public:

  // double default = 4;
  void clear_default_();
  double default_() const;
  void set_default_(double value);
  private:
  double _internal_default_() const;
  void _internal_set_default_(double value);
  public:

  // @@protoc_insertion_point(class_scope:infinity.module.engine.Engine.parameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  double min_;
  double max_;
  double default__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_engine_2eproto;
};
// -------------------------------------------------------------------

class Engine final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:infinity.module.engine.Engine) */ {
 public:
  inline Engine() : Engine(nullptr) {}
  ~Engine() override;
  explicit constexpr Engine(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Engine(const Engine& from);
  Engine(Engine&& from) noexcept
    : Engine() {
    *this = ::std::move(from);
  }

  inline Engine& operator=(const Engine& from) {
    CopyFrom(from);
    return *this;
  }
  inline Engine& operator=(Engine&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Engine& default_instance() {
    return *internal_default_instance();
  }
  static inline const Engine* internal_default_instance() {
    return reinterpret_cast<const Engine*>(
               &_Engine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Engine& a, Engine& b) {
    a.Swap(&b);
  }
  inline void Swap(Engine* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Engine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Engine* New() const final {
    return new Engine();
  }

  Engine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Engine>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Engine& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Engine& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Engine* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "infinity.module.engine.Engine";
  }
  protected:
  explicit Engine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Engine_parameter parameter;

  // accessors -------------------------------------------------------

  enum : int {
    kTrackParamsFieldNumber = 9,
    kNoteParamsFieldNumber = 10,
    kNameFieldNumber = 2,
    kMainFieldNumber = 3,
    kIconFieldNumber = 5,
    kAuthorFieldNumber = 6,
    kInforFieldNumber = 8,
    kEulaFieldNumber = 13,
    kWarrantDateFieldNumber = 14,
    kWarrantTimeFieldNumber = 15,
    kIMTVersionFieldNumber = 1,
    kVersionFieldNumber = 7,
    kSplitGroupFieldNumber = 4,
    kAutoCheckFieldNumber = 12,
    kCheckMethodFieldNumber = 11,
  };
  // repeated .infinity.module.engine.Engine.parameter trackParams = 9;
  int trackparams_size() const;
  private:
  int _internal_trackparams_size() const;
  public:
  void clear_trackparams();
  ::infinity::module::engine::Engine_parameter* mutable_trackparams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::infinity::module::engine::Engine_parameter >*
      mutable_trackparams();
  private:
  const ::infinity::module::engine::Engine_parameter& _internal_trackparams(int index) const;
  ::infinity::module::engine::Engine_parameter* _internal_add_trackparams();
  public:
  const ::infinity::module::engine::Engine_parameter& trackparams(int index) const;
  ::infinity::module::engine::Engine_parameter* add_trackparams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::infinity::module::engine::Engine_parameter >&
      trackparams() const;

  // repeated .infinity.module.engine.Engine.parameter noteParams = 10;
  int noteparams_size() const;
  private:
  int _internal_noteparams_size() const;
  public:
  void clear_noteparams();
  ::infinity::module::engine::Engine_parameter* mutable_noteparams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::infinity::module::engine::Engine_parameter >*
      mutable_noteparams();
  private:
  const ::infinity::module::engine::Engine_parameter& _internal_noteparams(int index) const;
  ::infinity::module::engine::Engine_parameter* _internal_add_noteparams();
  public:
  const ::infinity::module::engine::Engine_parameter& noteparams(int index) const;
  ::infinity::module::engine::Engine_parameter* add_noteparams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::infinity::module::engine::Engine_parameter >&
      noteparams() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string main = 3;
  void clear_main();
  const std::string& main() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_main(ArgT0&& arg0, ArgT... args);
  std::string* mutable_main();
  PROTOBUF_MUST_USE_RESULT std::string* release_main();
  void set_allocated_main(std::string* main);
  private:
  const std::string& _internal_main() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_main(const std::string& value);
  std::string* _internal_mutable_main();
  public:

  // string icon = 5;
  void clear_icon();
  const std::string& icon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_icon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_icon();
  PROTOBUF_MUST_USE_RESULT std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // string author = 6;
  void clear_author();
  const std::string& author() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_author(ArgT0&& arg0, ArgT... args);
  std::string* mutable_author();
  PROTOBUF_MUST_USE_RESULT std::string* release_author();
  void set_allocated_author(std::string* author);
  private:
  const std::string& _internal_author() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_author(const std::string& value);
  std::string* _internal_mutable_author();
  public:

  // string infor = 8;
  void clear_infor();
  const std::string& infor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_infor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_infor();
  PROTOBUF_MUST_USE_RESULT std::string* release_infor();
  void set_allocated_infor(std::string* infor);
  private:
  const std::string& _internal_infor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_infor(const std::string& value);
  std::string* _internal_mutable_infor();
  public:

  // string eula = 13;
  void clear_eula();
  const std::string& eula() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_eula(ArgT0&& arg0, ArgT... args);
  std::string* mutable_eula();
  PROTOBUF_MUST_USE_RESULT std::string* release_eula();
  void set_allocated_eula(std::string* eula);
  private:
  const std::string& _internal_eula() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_eula(const std::string& value);
  std::string* _internal_mutable_eula();
  public:

  // string warrantDate = 14;
  void clear_warrantdate();
  const std::string& warrantdate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_warrantdate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_warrantdate();
  PROTOBUF_MUST_USE_RESULT std::string* release_warrantdate();
  void set_allocated_warrantdate(std::string* warrantdate);
  private:
  const std::string& _internal_warrantdate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_warrantdate(const std::string& value);
  std::string* _internal_mutable_warrantdate();
  public:

  // string warrantTime = 15;
  void clear_warranttime();
  const std::string& warranttime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_warranttime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_warranttime();
  PROTOBUF_MUST_USE_RESULT std::string* release_warranttime();
  void set_allocated_warranttime(std::string* warranttime);
  private:
  const std::string& _internal_warranttime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_warranttime(const std::string& value);
  std::string* _internal_mutable_warranttime();
  public:

  // double IMT_Version = 1;
  void clear_imt_version();
  double imt_version() const;
  void set_imt_version(double value);
  private:
  double _internal_imt_version() const;
  void _internal_set_imt_version(double value);
  public:

  // double version = 7;
  void clear_version();
  double version() const;
  void set_version(double value);
  private:
  double _internal_version() const;
  void _internal_set_version(double value);
  public:

  // bool splitGroup = 4;
  void clear_splitgroup();
  bool splitgroup() const;
  void set_splitgroup(bool value);
  private:
  bool _internal_splitgroup() const;
  void _internal_set_splitgroup(bool value);
  public:

  // bool autoCheck = 12;
  void clear_autocheck();
  bool autocheck() const;
  void set_autocheck(bool value);
  private:
  bool _internal_autocheck() const;
  void _internal_set_autocheck(bool value);
  public:

  // uint32 checkMethod = 11;
  void clear_checkmethod();
  ::PROTOBUF_NAMESPACE_ID::uint32 checkmethod() const;
  void set_checkmethod(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_checkmethod() const;
  void _internal_set_checkmethod(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:infinity.module.engine.Engine)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::infinity::module::engine::Engine_parameter > trackparams_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::infinity::module::engine::Engine_parameter > noteparams_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr main_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr author_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr infor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eula_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr warrantdate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr warranttime_;
  double imt_version_;
  double version_;
  bool splitgroup_;
  bool autocheck_;
  ::PROTOBUF_NAMESPACE_ID::uint32 checkmethod_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_engine_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Engine_parameter

// string name = 1;
inline void Engine_parameter::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Engine_parameter::name() const {
  // @@protoc_insertion_point(field_get:infinity.module.engine.Engine.parameter.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Engine_parameter::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:infinity.module.engine.Engine.parameter.name)
}
inline std::string* Engine_parameter::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:infinity.module.engine.Engine.parameter.name)
  return _s;
}
inline const std::string& Engine_parameter::_internal_name() const {
  return name_.Get();
}
inline void Engine_parameter::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Engine_parameter::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Engine_parameter::release_name() {
  // @@protoc_insertion_point(field_release:infinity.module.engine.Engine.parameter.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Engine_parameter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:infinity.module.engine.Engine.parameter.name)
}

// double min = 2;
inline void Engine_parameter::clear_min() {
  min_ = 0;
}
inline double Engine_parameter::_internal_min() const {
  return min_;
}
inline double Engine_parameter::min() const {
  // @@protoc_insertion_point(field_get:infinity.module.engine.Engine.parameter.min)
  return _internal_min();
}
inline void Engine_parameter::_internal_set_min(double value) {
  
  min_ = value;
}
inline void Engine_parameter::set_min(double value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:infinity.module.engine.Engine.parameter.min)
}

// double max = 3;
inline void Engine_parameter::clear_max() {
  max_ = 0;
}
inline double Engine_parameter::_internal_max() const {
  return max_;
}
inline double Engine_parameter::max() const {
  // @@protoc_insertion_point(field_get:infinity.module.engine.Engine.parameter.max)
  return _internal_max();
}
inline void Engine_parameter::_internal_set_max(double value) {
  
  max_ = value;
}
inline void Engine_parameter::set_max(double value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:infinity.module.engine.Engine.parameter.max)
}

// double default = 4;
inline void Engine_parameter::clear_default_() {
  default__ = 0;
}
inline double Engine_parameter::_internal_default_() const {
  return default__;
}
inline double Engine_parameter::default_() const {
  // @@protoc_insertion_point(field_get:infinity.module.engine.Engine.parameter.default)
  return _internal_default_();
}
inline void Engine_parameter::_internal_set_default_(double value) {
  
  default__ = value;
}
inline void Engine_parameter::set_default_(double value) {
  _internal_set_default_(value);
  // @@protoc_insertion_point(field_set:infinity.module.engine.Engine.parameter.default)
}

// -------------------------------------------------------------------

// Engine

// double IMT_Version = 1;
inline void Engine::clear_imt_version() {
  imt_version_ = 0;
}
inline double Engine::_internal_imt_version() const {
  return imt_version_;
}
inline double Engine::imt_version() const {
  // @@protoc_insertion_point(field_get:infinity.module.engine.Engine.IMT_Version)
  return _internal_imt_version();
}
inline void Engine::_internal_set_imt_version(double value) {
  
  imt_version_ = value;
}
inline void Engine::set_imt_version(double value) {
  _internal_set_imt_version(value);
  // @@protoc_insertion_point(field_set:infinity.module.engine.Engine.IMT_Version)
}

// string name = 2;
inline void Engine::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Engine::name() const {
  // @@protoc_insertion_point(field_get:infinity.module.engine.Engine.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Engine::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:infinity.module.engine.Engine.name)
}
inline std::string* Engine::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:infinity.module.engine.Engine.name)
  return _s;
}
inline const std::string& Engine::_internal_name() const {
  return name_.Get();
}
inline void Engine::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Engine::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Engine::release_name() {
  // @@protoc_insertion_point(field_release:infinity.module.engine.Engine.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Engine::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:infinity.module.engine.Engine.name)
}

// string main = 3;
inline void Engine::clear_main() {
  main_.ClearToEmpty();
}
inline const std::string& Engine::main() const {
  // @@protoc_insertion_point(field_get:infinity.module.engine.Engine.main)
  return _internal_main();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Engine::set_main(ArgT0&& arg0, ArgT... args) {
 
 main_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:infinity.module.engine.Engine.main)
}
inline std::string* Engine::mutable_main() {
  std::string* _s = _internal_mutable_main();
  // @@protoc_insertion_point(field_mutable:infinity.module.engine.Engine.main)
  return _s;
}
inline const std::string& Engine::_internal_main() const {
  return main_.Get();
}
inline void Engine::_internal_set_main(const std::string& value) {
  
  main_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Engine::_internal_mutable_main() {
  
  return main_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Engine::release_main() {
  // @@protoc_insertion_point(field_release:infinity.module.engine.Engine.main)
  return main_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Engine::set_allocated_main(std::string* main) {
  if (main != nullptr) {
    
  } else {
    
  }
  main_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), main,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:infinity.module.engine.Engine.main)
}

// bool splitGroup = 4;
inline void Engine::clear_splitgroup() {
  splitgroup_ = false;
}
inline bool Engine::_internal_splitgroup() const {
  return splitgroup_;
}
inline bool Engine::splitgroup() const {
  // @@protoc_insertion_point(field_get:infinity.module.engine.Engine.splitGroup)
  return _internal_splitgroup();
}
inline void Engine::_internal_set_splitgroup(bool value) {
  
  splitgroup_ = value;
}
inline void Engine::set_splitgroup(bool value) {
  _internal_set_splitgroup(value);
  // @@protoc_insertion_point(field_set:infinity.module.engine.Engine.splitGroup)
}

// string icon = 5;
inline void Engine::clear_icon() {
  icon_.ClearToEmpty();
}
inline const std::string& Engine::icon() const {
  // @@protoc_insertion_point(field_get:infinity.module.engine.Engine.icon)
  return _internal_icon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Engine::set_icon(ArgT0&& arg0, ArgT... args) {
 
 icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:infinity.module.engine.Engine.icon)
}
inline std::string* Engine::mutable_icon() {
  std::string* _s = _internal_mutable_icon();
  // @@protoc_insertion_point(field_mutable:infinity.module.engine.Engine.icon)
  return _s;
}
inline const std::string& Engine::_internal_icon() const {
  return icon_.Get();
}
inline void Engine::_internal_set_icon(const std::string& value) {
  
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Engine::_internal_mutable_icon() {
  
  return icon_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Engine::release_icon() {
  // @@protoc_insertion_point(field_release:infinity.module.engine.Engine.icon)
  return icon_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Engine::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    
  } else {
    
  }
  icon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:infinity.module.engine.Engine.icon)
}

// string author = 6;
inline void Engine::clear_author() {
  author_.ClearToEmpty();
}
inline const std::string& Engine::author() const {
  // @@protoc_insertion_point(field_get:infinity.module.engine.Engine.author)
  return _internal_author();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Engine::set_author(ArgT0&& arg0, ArgT... args) {
 
 author_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:infinity.module.engine.Engine.author)
}
inline std::string* Engine::mutable_author() {
  std::string* _s = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:infinity.module.engine.Engine.author)
  return _s;
}
inline const std::string& Engine::_internal_author() const {
  return author_.Get();
}
inline void Engine::_internal_set_author(const std::string& value) {
  
  author_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Engine::_internal_mutable_author() {
  
  return author_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Engine::release_author() {
  // @@protoc_insertion_point(field_release:infinity.module.engine.Engine.author)
  return author_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Engine::set_allocated_author(std::string* author) {
  if (author != nullptr) {
    
  } else {
    
  }
  author_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), author,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:infinity.module.engine.Engine.author)
}

// double version = 7;
inline void Engine::clear_version() {
  version_ = 0;
}
inline double Engine::_internal_version() const {
  return version_;
}
inline double Engine::version() const {
  // @@protoc_insertion_point(field_get:infinity.module.engine.Engine.version)
  return _internal_version();
}
inline void Engine::_internal_set_version(double value) {
  
  version_ = value;
}
inline void Engine::set_version(double value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:infinity.module.engine.Engine.version)
}

// string infor = 8;
inline void Engine::clear_infor() {
  infor_.ClearToEmpty();
}
inline const std::string& Engine::infor() const {
  // @@protoc_insertion_point(field_get:infinity.module.engine.Engine.infor)
  return _internal_infor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Engine::set_infor(ArgT0&& arg0, ArgT... args) {
 
 infor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:infinity.module.engine.Engine.infor)
}
inline std::string* Engine::mutable_infor() {
  std::string* _s = _internal_mutable_infor();
  // @@protoc_insertion_point(field_mutable:infinity.module.engine.Engine.infor)
  return _s;
}
inline const std::string& Engine::_internal_infor() const {
  return infor_.Get();
}
inline void Engine::_internal_set_infor(const std::string& value) {
  
  infor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Engine::_internal_mutable_infor() {
  
  return infor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Engine::release_infor() {
  // @@protoc_insertion_point(field_release:infinity.module.engine.Engine.infor)
  return infor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Engine::set_allocated_infor(std::string* infor) {
  if (infor != nullptr) {
    
  } else {
    
  }
  infor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), infor,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:infinity.module.engine.Engine.infor)
}

// repeated .infinity.module.engine.Engine.parameter trackParams = 9;
inline int Engine::_internal_trackparams_size() const {
  return trackparams_.size();
}
inline int Engine::trackparams_size() const {
  return _internal_trackparams_size();
}
inline void Engine::clear_trackparams() {
  trackparams_.Clear();
}
inline ::infinity::module::engine::Engine_parameter* Engine::mutable_trackparams(int index) {
  // @@protoc_insertion_point(field_mutable:infinity.module.engine.Engine.trackParams)
  return trackparams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::infinity::module::engine::Engine_parameter >*
Engine::mutable_trackparams() {
  // @@protoc_insertion_point(field_mutable_list:infinity.module.engine.Engine.trackParams)
  return &trackparams_;
}
inline const ::infinity::module::engine::Engine_parameter& Engine::_internal_trackparams(int index) const {
  return trackparams_.Get(index);
}
inline const ::infinity::module::engine::Engine_parameter& Engine::trackparams(int index) const {
  // @@protoc_insertion_point(field_get:infinity.module.engine.Engine.trackParams)
  return _internal_trackparams(index);
}
inline ::infinity::module::engine::Engine_parameter* Engine::_internal_add_trackparams() {
  return trackparams_.Add();
}
inline ::infinity::module::engine::Engine_parameter* Engine::add_trackparams() {
  ::infinity::module::engine::Engine_parameter* _add = _internal_add_trackparams();
  // @@protoc_insertion_point(field_add:infinity.module.engine.Engine.trackParams)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::infinity::module::engine::Engine_parameter >&
Engine::trackparams() const {
  // @@protoc_insertion_point(field_list:infinity.module.engine.Engine.trackParams)
  return trackparams_;
}

// repeated .infinity.module.engine.Engine.parameter noteParams = 10;
inline int Engine::_internal_noteparams_size() const {
  return noteparams_.size();
}
inline int Engine::noteparams_size() const {
  return _internal_noteparams_size();
}
inline void Engine::clear_noteparams() {
  noteparams_.Clear();
}
inline ::infinity::module::engine::Engine_parameter* Engine::mutable_noteparams(int index) {
  // @@protoc_insertion_point(field_mutable:infinity.module.engine.Engine.noteParams)
  return noteparams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::infinity::module::engine::Engine_parameter >*
Engine::mutable_noteparams() {
  // @@protoc_insertion_point(field_mutable_list:infinity.module.engine.Engine.noteParams)
  return &noteparams_;
}
inline const ::infinity::module::engine::Engine_parameter& Engine::_internal_noteparams(int index) const {
  return noteparams_.Get(index);
}
inline const ::infinity::module::engine::Engine_parameter& Engine::noteparams(int index) const {
  // @@protoc_insertion_point(field_get:infinity.module.engine.Engine.noteParams)
  return _internal_noteparams(index);
}
inline ::infinity::module::engine::Engine_parameter* Engine::_internal_add_noteparams() {
  return noteparams_.Add();
}
inline ::infinity::module::engine::Engine_parameter* Engine::add_noteparams() {
  ::infinity::module::engine::Engine_parameter* _add = _internal_add_noteparams();
  // @@protoc_insertion_point(field_add:infinity.module.engine.Engine.noteParams)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::infinity::module::engine::Engine_parameter >&
Engine::noteparams() const {
  // @@protoc_insertion_point(field_list:infinity.module.engine.Engine.noteParams)
  return noteparams_;
}

// uint32 checkMethod = 11;
inline void Engine::clear_checkmethod() {
  checkmethod_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Engine::_internal_checkmethod() const {
  return checkmethod_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Engine::checkmethod() const {
  // @@protoc_insertion_point(field_get:infinity.module.engine.Engine.checkMethod)
  return _internal_checkmethod();
}
inline void Engine::_internal_set_checkmethod(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  checkmethod_ = value;
}
inline void Engine::set_checkmethod(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_checkmethod(value);
  // @@protoc_insertion_point(field_set:infinity.module.engine.Engine.checkMethod)
}

// bool autoCheck = 12;
inline void Engine::clear_autocheck() {
  autocheck_ = false;
}
inline bool Engine::_internal_autocheck() const {
  return autocheck_;
}
inline bool Engine::autocheck() const {
  // @@protoc_insertion_point(field_get:infinity.module.engine.Engine.autoCheck)
  return _internal_autocheck();
}
inline void Engine::_internal_set_autocheck(bool value) {
  
  autocheck_ = value;
}
inline void Engine::set_autocheck(bool value) {
  _internal_set_autocheck(value);
  // @@protoc_insertion_point(field_set:infinity.module.engine.Engine.autoCheck)
}

// string eula = 13;
inline void Engine::clear_eula() {
  eula_.ClearToEmpty();
}
inline const std::string& Engine::eula() const {
  // @@protoc_insertion_point(field_get:infinity.module.engine.Engine.eula)
  return _internal_eula();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Engine::set_eula(ArgT0&& arg0, ArgT... args) {
 
 eula_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:infinity.module.engine.Engine.eula)
}
inline std::string* Engine::mutable_eula() {
  std::string* _s = _internal_mutable_eula();
  // @@protoc_insertion_point(field_mutable:infinity.module.engine.Engine.eula)
  return _s;
}
inline const std::string& Engine::_internal_eula() const {
  return eula_.Get();
}
inline void Engine::_internal_set_eula(const std::string& value) {
  
  eula_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Engine::_internal_mutable_eula() {
  
  return eula_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Engine::release_eula() {
  // @@protoc_insertion_point(field_release:infinity.module.engine.Engine.eula)
  return eula_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Engine::set_allocated_eula(std::string* eula) {
  if (eula != nullptr) {
    
  } else {
    
  }
  eula_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), eula,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:infinity.module.engine.Engine.eula)
}

// string warrantDate = 14;
inline void Engine::clear_warrantdate() {
  warrantdate_.ClearToEmpty();
}
inline const std::string& Engine::warrantdate() const {
  // @@protoc_insertion_point(field_get:infinity.module.engine.Engine.warrantDate)
  return _internal_warrantdate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Engine::set_warrantdate(ArgT0&& arg0, ArgT... args) {
 
 warrantdate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:infinity.module.engine.Engine.warrantDate)
}
inline std::string* Engine::mutable_warrantdate() {
  std::string* _s = _internal_mutable_warrantdate();
  // @@protoc_insertion_point(field_mutable:infinity.module.engine.Engine.warrantDate)
  return _s;
}
inline const std::string& Engine::_internal_warrantdate() const {
  return warrantdate_.Get();
}
inline void Engine::_internal_set_warrantdate(const std::string& value) {
  
  warrantdate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Engine::_internal_mutable_warrantdate() {
  
  return warrantdate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Engine::release_warrantdate() {
  // @@protoc_insertion_point(field_release:infinity.module.engine.Engine.warrantDate)
  return warrantdate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Engine::set_allocated_warrantdate(std::string* warrantdate) {
  if (warrantdate != nullptr) {
    
  } else {
    
  }
  warrantdate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), warrantdate,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:infinity.module.engine.Engine.warrantDate)
}

// string warrantTime = 15;
inline void Engine::clear_warranttime() {
  warranttime_.ClearToEmpty();
}
inline const std::string& Engine::warranttime() const {
  // @@protoc_insertion_point(field_get:infinity.module.engine.Engine.warrantTime)
  return _internal_warranttime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Engine::set_warranttime(ArgT0&& arg0, ArgT... args) {
 
 warranttime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:infinity.module.engine.Engine.warrantTime)
}
inline std::string* Engine::mutable_warranttime() {
  std::string* _s = _internal_mutable_warranttime();
  // @@protoc_insertion_point(field_mutable:infinity.module.engine.Engine.warrantTime)
  return _s;
}
inline const std::string& Engine::_internal_warranttime() const {
  return warranttime_.Get();
}
inline void Engine::_internal_set_warranttime(const std::string& value) {
  
  warranttime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Engine::_internal_mutable_warranttime() {
  
  return warranttime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Engine::release_warranttime() {
  // @@protoc_insertion_point(field_release:infinity.module.engine.Engine.warrantTime)
  return warranttime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Engine::set_allocated_warranttime(std::string* warranttime) {
  if (warranttime != nullptr) {
    
  } else {
    
  }
  warranttime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), warranttime,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:infinity.module.engine.Engine.warrantTime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace engine
}  // namespace module
}  // namespace infinity

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_engine_2eproto
